#include "debug.h"
#include <tonc.h>

char Debug::m_word[48];

Debug::Debug()
{
    for(int i=0; i< 48; i++)
    {
        Debug::m_word[i] = ' ';
    }
    m_drawRequired = true;
}

Debug::~Debug()
{
}

void Debug::Log(char *_word, int _len)
{
    for(int i=0; i < _len; i++)
    {
        Debug::m_word[i] = _word[i];
    }
}

void Debug::Render()
{

    const bool* visPnt = nullptr;
    int index = -1;
    for(short i = 0; i < 48; i++)
    {
        char c = m_word[i];
        if(c >= '0' && c <= '9')
        {
            index = c - '0';
            visPnt = VisualNums;
        }
        else if (c >= 'a' && c <= 'z') 
        {
            index = c - 'a';
            visPnt = VisualLttr;
        }
        else if(c >= 'A' && c <= 'Z')
        {
            index = c - 'A';
            visPnt = VisualLttr;
        }
        else if(c >= '+' && c <= '/')
        {
            index = c - '+';
            visPnt = VisualSymbl;
        }
        else
        {
            visPnt = nullptr;
        }
        //int index = (m_word[i] - '0');
        //bool check = index < 10 && index >= 0;
        index*=20;//size

        for(int y = 0; y < 5; y++)
        {
            for(int x = 0; x < 4; x++)
            {
                COLOR cl = CLR_OLIVE;
                if(visPnt != nullptr)
                {
                    bool b = visPnt[index + (y*4+x)];
                    cl = b ? CLR_CREAM : CLR_BLACK;
                }
                ((unsigned short*)0x06000000)[(i*5+x)+((10+y)*240)]=cl;
            }
        }
        
    }
    m_drawRequired = false;
}

void Debug::EnableDebug(bool _enable)
{
    if(_enable)
    {
        //store reg
        REG_DISPCNT = DCNT_MODE3 | DCNT_BG2;
        m_drawRequired = true;
    }
    else
    {
        //set disp to stored reg??
        //hardcoded for now
        REG_DISPCNT = DCNT_MODE0 | DCNT_BG0  | DCNT_BG1| DCNT_OBJ | DCNT_OBJ_1D;

    }
}

/*
bool Debug::Number(char _num, bool _grid[20])
{
    switch (_num)
    {
    case '0':
    {
        bool arr[20]
        {
            0, 1, 1, 0,
            1, 0, 0, 1,
            1, 0, 0, 1,
            1, 0, 0, 1,
            0, 1, 1, 0
        };

        _grid = arr;
        break;
    }
    case '1':
    {
        bool arr[20]
        {
            0,0,1,0,
            0,1,1,0,
            0,0,1,0,
            0,0,1,0,
            0,1,1,1
        };
        _grid = arr;
        break;
    }
    case '2':
    {
        bool arr[20]
        {
            1,1,1,0,
            0,0,0,1,
            0,0,1,0,
            0,1,0,0,
            1,1,1,1
        };
        _grid = arr;
        break;
    }
    case '3':
    {
        bool arr[20]
        {
            1,1,1,0,
            0,0,0,1,
            0,1,1,0,
            0,0,0,1,
            1,1,1,0
        };
        _grid = arr;
        break;
    }
    case '4':
    {
        bool arr[20]
        {
            1,0,0,0,
            1,0,1,0,
            1,1,1,1,
            0,0,1,0,
            0,0,1,0
        };
        _grid = arr;
        break;
    }
    case '5':
    {
        bool arr[20]
        {
            1,1,1,1,
            1,0,0,0,
            1,1,1,0,
            0,0,0,1,
            1,1,1,0
        };
        _grid = arr;
        break;
    }
    case '6':
    {
        bool arr[20]
        {
            0,1,1,1,
            1,0,0,0,
            1,1,1,0,
            1,0,0,1,
            0,1,1,0
        };
        _grid = arr;
        break;
    }
    case '7':
    {
        bool arr[20]
        {
            1,1,1,1,
            0,0,0,1,
            0,0,1,0,
            0,1,0,0,
            0,1,0,0
        };
        _grid = arr;
        break;
    }
    case '8':
    {
        bool arr[20]
        {
            0,1,1,0,
            1,0,0,1,
            0,1,1,0,
            1,0,0,1,
            0,1,1,0
        };
        _grid = arr;
        break;
    }
    case '9':
    {
        bool arr[20]
        {
            0,1,1,0,
            1,0,0,1,
            0,1,1,1,
            0,0,0,1,
            1,1,1,0
        };
        _grid = arr;
        break;
    }
    default:
        return false;
    }
    return true;
}
*/

const bool VisualNums[200]=
{
    //0
    0, 1, 1, 0,
    1, 0, 0, 1,
    1, 0, 1, 1,
    1, 1, 0, 1,
    0, 1, 1, 0,
    //1
    0,0,1,0,
    0,1,1,0,
    0,0,1,0,
    0,0,1,0,
    0,1,1,1,
    //2
    1,1,1,0,
    0,0,0,1,
    0,0,1,0,
    0,1,0,0,
    1,1,1,1,
    //3
    1,1,1,0,
    0,0,0,1,
    0,1,1,0,
    0,0,0,1,
    1,1,1,0,
    //4
    1,0,0,0,
    1,0,1,0,
    1,1,1,1,
    0,0,1,0,
    0,0,1,0,
    //5
    1,1,1,1,
    1,0,0,0,
    1,1,1,0,
    0,0,0,1,
    1,1,1,0,
    //6
    0,1,1,1,
    1,0,0,0,
    1,1,1,0,
    1,0,0,1,
    0,1,1,0,
    //7
    1,1,1,1,
    0,0,0,1,
    0,0,1,0,
    0,1,0,0,
    0,1,0,0,
    //8
    0,1,1,0,
    1,0,0,1,
    0,1,1,0,
    1,0,0,1,
    0,1,1,0,
    //9
    0,1,1,0,
    1,0,0,1,
    0,1,1,1,
    0,0,0,1,
    1,1,1,0,
};

const bool VisualLttr[520]=
{
    //A
    0,1,1,0,
    1,0,0,1,
    1,1,1,1,
    1,0,0,1,
    1,0,0,1,
    //B
    1,1,1,0,
    1,0,0,1,
    1,1,1,0,
    1,0,0,1,
    1,1,1,0,
    //C
    0,1,1,1,
    1,0,0,0,
    1,0,0,0,
    1,0,0,0,
    0,1,1,1,
    //D
    1,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,1,1,0,
    //E
    1,1,1,1,
    1,0,0,0,
    1,1,1,0,
    1,0,0,0,
    1,1,1,1,
    //F
    1,1,1,1,
    1,0,0,0,
    1,1,1,0,
    1,0,0,0,
    1,0,0,0,
    //G
    0,1,1,1,
    1,0,0,0,
    1,0,0,0,
    1,0,0,1,
    0,1,1,1,
    //H
    1,0,0,1,
    1,0,0,1,
    1,1,1,1,
    1,0,0,1,
    1,0,0,1,
    //I
    0,1,1,1,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,1,1,1,
    //J
    1,1,1,1,
    0,0,0,1,
    0,0,0,1,
    1,0,0,1,
    0,1,1,0,
    //K
    1,0,0,1,
    1,0,1,0,
    1,1,0,0,
    1,0,1,0,
    1,0,0,1,
    //L
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,1,1,
    //M
    1,1,1,0,
    1,1,0,1,
    1,1,0,1,
    1,0,0,1,
    1,0,0,1,
    //N
    1,0,0,1,
    1,1,0,1,
    1,0,1,1,
    1,0,0,1,
    1,0,0,1,
    //O
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,
    //P
    1,1,1,0,
    1,0,0,1,
    1,1,1,0,
    1,0,0,0,
    1,0,0,0,
    //Q
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,
    0,0,1,1,
    //R
    1,1,1,0,
    1,0,0,1,
    1,1,1,0,
    1,0,0,1,
    1,0,0,1,
    //S
    0,1,1,1,
    1,0,0,0,
    0,1,1,0,
    0,0,0,1,
    1,1,1,0,
    //T
    1,1,1,1,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    //U
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,
    //V
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,1,0,
    0,1,0,0,
    //W
    1,0,0,1,
    1,0,0,1,
    1,0,1,1,
    1,0,1,1,
    0,1,1,1,
    //X
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    //Y
    1,0,0,1,
    1,0,0,1,
    0,1,1,1,
    0,0,0,1,
    0,1,1,1,
    //Z
    1,1,1,1,
    0,0,0,1,
    0,1,1,0,
    1,0,0,0,
    1,1,1,1
};

const bool VisualSymbl[100]=
{
    //+
    0,0,0,0,
    0,0,1,0,
    0,1,1,1,
    0,0,1,0,
    0,0,0,0,
    //,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,1,0,
    0,1,0,0,
    //-
    0,0,0,0,
    0,0,0,0,
    1,1,1,1,
    0,0,0,0,
    0,0,0,0,
    //.
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,1,1,0,
    0,1,1,0,
    // /
    0,0,0,1,
    0,0,0,1,
    0,0,1,0,
    0,1,0,0,
    0,1,0,0
};